#include <stdlib.h>
#include <stdio.h>
#include "e_state_ll.h"
#include "rmap_structs.h"
#include "info_ll.h"


double
get_trans (e_state es, /* root of the electronic state llist */
           int idx_to /* index of the state transitioning to */
           ) {
  int j; /* looping variables */
  int trs_max = es -> n_tfrom;
  double tmom;

  int * ti = es -> idxs_to;
  /* printf( "looping\n" ); */
  for (j=0; j<trs_max; j++) {
    /* printf( "ti[%d] = %d, %d\n", j, ti[j], idx_to); */
    if (ti[j] == idx_to) {
      tmom = (es -> t_moms)[j];
      break;
    }
  }

  return tmom;
}

e_state
get_state (info_node inode, /* the info node at root of the state ll */
           int s_idx /* index of the state to get */
           ){

  e_state curr_st = (inode -> root_e_state);
  e_state next_st;

  while((next_st = curr_st -> next) != NULL){
    /* printf( "curr_st=%d, s_idxs=%d\n", curr_st -> state_idx,s_idx); */
    /* sleep(1); */
    if ((curr_st -> state_idx) == s_idx) {
      /* printf( "found the correct state\n" ); */
      break;
    }
    curr_st = next_st;
  }

  return curr_st;
}

double
get_ediff (info_node inode, /* root of the electronic state llist */
           int idx_es1,
           int idx_es2
           ) {

  e_state es1 = get_state(inode, idx_es1);
  e_state es2 = get_state(inode, idx_es1);

  return (es1 -> e_val) - (es2 -> e_val);
}
